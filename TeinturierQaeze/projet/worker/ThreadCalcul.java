/*
 * nom         : ThreadCalcul
 * 
 * description : cette classe nous permet de calculer les valeurs d'un intervalle
 * 
 * Date        : 31/03/2023
 * 
 * Copyright   : Teinturier, Qaeze
 */

package projet.worker;

import java.util.*;

public class ThreadCalcul extends Thread{

    private int                          a;       /*premier nombre de l'intervalle*/
    private int                          b;       /*dernier nombre de l'intervalle*/
    private Hashtable <Integer, Integer> htable;  /*hashtable */
    private boolean                      Termine; /*booléen pour vérifier si le thread a fini */ 
    private int                          tab[];   /*tableau des occurences des ordres */
    private int                          moy;     /*numérateur de la moyenne */

    ThreadCalcul(int a, int b){
        this.a = a;
        this.b = b;
        this.htable = new Hashtable<Integer,Integer>();
        tab=new int[12];
        for(int i=0;i<12;i++){
            tab[i]=0;
        }
        this.moy=0;
    }

    public boolean getTermine(){
        return this.Termine;
    }

    /*
     * Fonctions qui s'occupent du calcul de la persistance d'un nombre
     */
    public int ordrePersistance(int x){
        int ordre = 0;
        while(x/10!=0){
            x=persistanceNombre(x);
            ordre++;
        }
        return ordre;
    }

    public int  persistanceNombre(int k){
        ArrayList<Integer> liste = new ArrayList<Integer>();
        while(k/10!=0){
            liste.add(k%10);
            k=k/10;
        }
        liste.add(k);
        k=1;
        for(int i=0;i<liste.size();i++){
            k=k*liste.get(i);
        }
        return k;
    }


    public void run(){

        //on calcul l'ordre de persistance de chaque nombre de l'intervalle
        for(int x=a; x<=b; x++){
            int ODR = ordrePersistance(x);
            try {
                htable.put(x, ODR);
            } catch (Exception e) {
                System.out.println("Error Hashtable (put) : "+x+" : "+ODR);
            }
            tab[ODR]++;
            moy+=ODR;
        };
        
        //on remplit les données de notre worker
        Worker.remplitWorker(htable, tab, moy); ////////////////////////////////////////////
        this.Termine = true;
    }
}